scalar Void
scalar Upload

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Image {
  id: ID!
  url: String!
  width: Int
  height: Int
}

type User {
  id: ID!
  name: String!
  bio: String
  imageUrl: String
}

type Pick {
  id: ID!
  thoughtId: ID!
}

type Thought {
  id: ID!
  title: String
  text: String!
  createdAt: String
  contributor: User
  picked: Boolean!
  images: [Image]!
}

enum Genre {
  BUSINESS
  ECONOMY
  POLITICS
  SOCIETY
}

enum CustomErrorResponseCode {
  ALREADY_USER_EXISTING
  INVALID_REQUEST
}

type ThoughtEdge {
  node: Thought!
  cursor: String!
}

type ThoughtsConnection {
  edges: [ThoughtEdge!]!
  pageInfo: PageInfo!
}

type InitialResponse {
  me: User!
}

type Query {
  thoughts(
    genre: Genre!
    first: Int
    after: String # last: Int # before: String
  ): ThoughtsConnection!
  initialData: InitialResponse!
}

input CreateUserInput {
  name: String!
  email: String!
  idToken: String!
}

input CreatePickInput {
  thoughtId: String!
}

type SignOutResponse {
  id: ID!
}

# Imageはidなしの型を使いたい時があるのでidなしImageを定義
type SubImage {
  url: String!
  width: Int
  height: Int
}

input ImageInput {
  url: String!
  width: Int
  height: Int
}

type UploadThoughtImagesResponse {
  images: [SubImage!]!
}

input CreateThoughtInput {
  title: String
  text: String!
  images: [ImageInput!]
  genre: Genre!
}

type CreateThoughtResponse {
  id: ID!
}

input DeleteThoughtInput {
  id: String!
}

type DeleteThoughtResponse {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createPick(input: CreatePickInput!): Pick!
  deletePick(thoughtId: ID!): Pick!
  signOut: SignOutResponse!
  uploadThoughtImages(files: [Upload!]!): UploadThoughtImagesResponse!
  createThought(input: CreateThoughtInput!): CreateThoughtResponse!
  deleteThought(input: DeleteThoughtInput!): DeleteThoughtResponse!
}
