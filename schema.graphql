scalar Void
scalar Upload

enum Genre {
  BUSINESS
  ECONOMY
  POLITICS
  SOCIETY
}

enum NewsGenre {
  BUSINESS
  ECONOMY
  POLITICS
  TECHNOLOGY
}

enum CustomErrorResponseCode {
  ALREADY_USER_EXISTING
  INVALID_REQUEST
  ALREADY_UN_BLOKING
  NOT_FOUND
}

enum PushNotificationDataKind {
  THOUGHT_TALK_ROOM_MESSAGE
  NEWS_TALK_ROOM_MESSAGE
  ONE_ON_ONE_TALK_ROOM_MESSAGE
}

enum NotificationType {
  REPLY
  LIKE
  FOLLOW
}

enum TalkRoomType {
  THOUGHT
  NEWS
  ONEONONE
}

enum Plan {
  Normal
  Plus
}

enum DevicePlatform {
  ios
  android
}

enum ReceiptVerificationError {
  Expiration
  ReceiptNotFound
  LatestReceiptNotFound
  InValidRequestToAppleEndpoint
  InValidStatus
}

enum UserGetError {
  NOT_FOUND
}

enum FollowError {
  NOT_FOUND
  BLOCKING
  BLOKCED
}

enum UnFollowError {
  NOT_FOUND
}

enum VerifyEmailAuthCodeError {
  NOT_FOUND
  EXPIRED
  INVALID
}

type PushNotificationMessage {
  type: PushNotificationDataKind!
  id: String!
  roomId: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface TalkRoom {
  id: Int!
  createdAt: String
  updatedAt: String
  allMessageSeen: Boolean
}

interface TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
}

interface TalkRoomMember {
  id: Int!
  createdAt: String
  user: User!
  talkRoom: TalkRoom
}

type Image {
  id: ID!
  url: String!
  width: Int
  height: Int
}

type ThoughtImage {
  id: ID!
  url: String!
  width: Int
  height: Int
}

type SnsAccounts {
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
}

type User {
  id: ID!
  name: String!
  bio: String
  imageUrl: String
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
  follow: Boolean
  blocking: Boolean # リクエストユーザーが対象のユーザーをブロックしているかどうか
  blocked: Boolean # リクエストユーザーが対象のユーザーからブロックされているかどうか
  pickedNews(first: Int, after: String): NewsPickConnection
  pickedThoughts(first: Int, after: String): ThoughtsConnection
  likedThoughts(first: Int, after: String): ThoughtLikeConnection
  snsAccounts: SnsAccounts
}

type Deleted {
  message: String
}

type BlockedByUser {
  id: ID!
  name: String!
  imageUrl: String
}

type IsBlocked {
  message: String
  blockedByUser: User
}

type Me {
  id: ID!
  loggedIn: Boolean!
  name: String!
  bio: String
  imageUrl: String
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
  plan: Plan!
  snsAccounts: SnsAccounts
}

type Pick {
  id: ID!
  thoughtId: ID!
}

type Thought {
  id: ID!
  title: String
  text: String!
  createdAt: String
  contributor: User
  picked: Boolean
  images: [ThoughtImage]!
  liked: Boolean
}

type ThoughtLike {
  id: Int!
  createdAt: String
  user: User
  thought: Thought
}

type ThoughtLikeEdge {
  node: ThoughtLike
  cursor: String!
}

type ThoughtLikeConnection {
  edges: [ThoughtLikeEdge!]!
  pageInfo: PageInfo!
}

type News {
  id: Int!
  title: String!
  link: String!
  image: String
  articleCreatedAt: String
  genre: NewsGenre!
  provider: String
  picked: Boolean!
}

type Follow {
  id: ID!
  followerId: ID!
  followeeId: ID!
}

type ThoughtEdge {
  node: Thought!
  cursor: String!
}

type ThoughtsConnection {
  edges: [ThoughtEdge!]!
  pageInfo: PageInfo!
}

type InitialResponse {
  me: User!
}

type NewsEdge {
  node: News!
  cursor: String!
}

type NewsConnection {
  edges: [NewsEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type ThoughtTalkRoom implements TalkRoom {
  id: Int!
  thought: Thought
  createdAt: String
  updatedAt: String
  members(first: Int, after: String): ThoughtTalkRoomMemberConnection
  messages(first: Int!, after: String): ThoughtTalkRoomMessageConnection
  allMessageSeen: Boolean
}

type ThoughtTalkRoomMessage implements TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
  talkRoom: ThoughtTalkRoom
  replyMessage: ThoughtTalkRoomMessage
}

type ThoughtTalkRoomMessageEdge {
  node: ThoughtTalkRoomMessage!
  cursor: String!
}

type ThoughtTalkRoomMessageConnection {
  edges: [ThoughtTalkRoomMessageEdge!]!
  pageInfo: PageInfo!
}

type ThoughtTalkRoomMember implements TalkRoomMember {
  id: Int!
  createdAt: String
  talkRoom: ThoughtTalkRoom
  user: User!
}

type ThoughtTalkRoomMemberEdge {
  node: ThoughtTalkRoomMember!
  cursor: String!
}

type ThoughtTalkRoomMemberConnection {
  edges: [ThoughtTalkRoomMemberEdge!]!
  pageInfo: PageInfo!
}

type NewsTalkRoom implements TalkRoom {
  id: Int!
  news: News
  createdAt: String
  updatedAt: String
  allMessageSeen: Boolean
  members(first: Int, after: String): NewsTalkRoomMemberConnection
  messages(first: Int, after: String): NewsTalkRoomMessageConnection
}

type NewsTalkRoomMessage implements TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
  talkRoom: NewsTalkRoom
  replyMessage: NewsTalkRoomMessage
}

type NewsTalkRoomMessageEdge {
  node: NewsTalkRoomMessage!
  cursor: String!
}

type NewsTalkRoomMessageConnection {
  edges: [NewsTalkRoomMessageEdge!]!
  pageInfo: PageInfo!
}

type NewsTalkRoomMember implements TalkRoomMember {
  id: Int!
  createdAt: String
  user: User!
  talkRoom: NewsTalkRoom
}

type NewsTalkRoomMemberEdge {
  node: NewsTalkRoomMember!
  cursor: String!
}

type NewsTalkRoomMemberConnection {
  edges: [NewsTalkRoomMemberEdge!]!
  pageInfo: PageInfo!
}

type NewsPick {
  id: Int!
  createdAt: String
  picker: User
  news: News
}

type NewsPickEdge {
  node: NewsPick!
  cursor: String!
}

type NewsPickConnection {
  edges: [NewsPickEdge!]!
  pageInfo: PageInfo!
}

type OneOnOneTalkRoom implements TalkRoom {
  id: Int!
  createdAt: String!
  updatedAt: String!
  sender: User
  recipient: User
  allMessageSeen: Boolean
  messages(first: Int, after: String): OneOnOneTalkRoomMessageConnection
}

type OneOnOneTalkRoomMessage implements TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
  talkRoom: OneOnOneTalkRoom
  replyMessage: OneOnOneTalkRoomMessage
}

type OneOnOneTalkRoomMessageEdge {
  node: OneOnOneTalkRoomMessage!
  cursor: String!
}

type OneOnOneTalkRoomMessageConnection {
  edges: [OneOnOneTalkRoomMessageEdge!]!
  pageInfo: PageInfo!
}

type DeviceToken {
  id: Int!
  token: String!
  createdAt: String!
  user: User
}

type Notification {
  id: Int!
  createdAt: String!
  type: NotificationType!
  talkRoomType: TalkRoomType
  talkRoomId: Int
  user: User
  performer: User
  thought: Thought
  seen: Boolean
  # talkRoom: TalkRoom
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
}

type Query {
  thoughts(
    genre: Genre
    first: Int
    after: String
    follow: Boolean
  ): ThoughtsConnection!
  initialData: InitialResponse!
  news(genre: NewsGenre!, first: Int, after: String): NewsConnection
  me: Me!
  user(id: ID!): User!
  pickedThoughts(first: Int!, after: String): ThoughtsConnection!
  pickedNews(first: Int!, after: String): NewsPickConnection!
  userThoughts(userId: ID!, first: Int!, after: String): ThoughtsConnection!
  follows(first: Int!, after: String, q: String): UserConnection!
  blockingUsers: [User]!
  thoughtTalkRooms: [ThoughtTalkRoom]!
  thoughtTalkRoom(id: Int!): ThoughtTalkRoom!
  newsTalkRooms: [NewsTalkRoom!]!
  newsTalkRoom(id: Int!): NewsTalkRoom!
  oneNews(id: Int!): News!
  thought(id: ID!): Thought!
  oneOnOneTalkRooms: [OneOnOneTalkRoom]!
  oneOnOneTalkRoom(id: Int!): OneOnOneTalkRoom!
  notifications(first: Int, after: String): NotificationConnection!
  newsTalkRoomMessage(id: Int!): NewsTalkRoomMessage
  thoughtTalkRoomMessage(id: Int!): ThoughtTalkRoomMessage
  oneOnOneTalkRoomMessage(id: Int!): OneOnOneTalkRoomMessage
}

input CreateUserInput {
  name: String!
  email: String!
  idToken: String!
}

input CreatePickInput {
  thoughtId: String!
}

# Imageはidなしの型を使いたい時があるのでidなしImageを定義
type SubImage {
  url: String!
  width: Int
  height: Int
}

input ImageInput {
  url: String!
  width: Int
  height: Int
}

type UploadThoughtImagesResponse {
  images: [SubImage!]!
}

input CreateThoughtInput {
  title: String
  text: String!
  images: [ImageInput!]
  genre: Genre!
}

type CreateThoughtResponse {
  id: ID!
}

input DeleteThoughtInput {
  id: String!
}

type DeleteThoughtResponse {
  id: ID!
}

input CreateNewsPickInput {
  newsId: Int!
}

type CreateNewsPickResponse {
  id: Int!
}

input DeleteNewsPickInput {
  newsId: Int!
}

input UpdateMeInput {
  name: String!
  bio: String
  imageUrl: String
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
}

input JoinTalkInput {
  thoughtId: String!
  contributorId: String!
}

input CreateThoughtTalkRoomMessageInput {
  text: String!
  roomId: Int!
  replyTo: Int
}

input CreateUserThoughtTalkRoomMessageSeenInput {
  messageId: Int!
  roomId: Int!
}

input GetOutThoughtTalkRoomInput {
  roomId: Int!
}

input DeleteThoughtTalkRoomMemberInput {
  roomId: Int!
  userId: ID!
}

input DeleteThoughtTalkRoomInput {
  talkRoomId: Int!
}

input JoinNewsTalkRoomInput {
  newsId: Int!
}

input CreateNewsTalkRoomMessageInput {
  text: String!
  talkRoomId: Int!
  replyTo: Int
}

input CreateUserNewsTalkRoomMessageSeenInput {
  messageId: Int!
  talkRoomId: Int!
}

input GetOutNewsTalkRoomInput {
  talkRoomId: Int!
}

input RequestNewsTalkRoomMemberDeletionInput {
  memberId: Int! # UserのIDではなくNewsTalkRoomMemberのID
  talkRoomId: Int!
}

input CreateOneOnOneTalkRoomInput {
  recipientId: ID!
}

input CreateOneOnOneTalkRoomMessageInput {
  text: String!
  talkRoomId: Int!
  replyTo: Int
}

input SeenOneOnOneTalkRoomMessageInput {
  messageId: Int!
  talkRoomId: Int!
}

input DeleteOneOnOneTalkRoonInput {
  talkRoomId: Int!
}

input AddDeviceTokenInput {
  oldToken: String
  newToken: String!
}

input LikeThoughtInput {
  thoughtId: String!
}

input UnLikeThoughtInput {
  thoughtId: String!
}

input VerifyIapReceiptInput {
  platform: String!
  productId: String!
  receipt: String!
}

input UpdateEmailInput {
  email: String!
}

input CreateEmailAuthCodeInput {
  email: String!
}

input VerifyEmailAuthCodeInput {
  code: String!
}

type Mutation {
  createUser(input: CreateUserInput!): Me!
  createPick(input: CreatePickInput!): Pick!
  deletePick(thoughtId: ID!): Pick!
  signOut: Me!
  uploadThoughtImages(files: [Upload!]!): UploadThoughtImagesResponse!
  createThought(input: CreateThoughtInput!): CreateThoughtResponse!
  deleteThought(input: DeleteThoughtInput!): DeleteThoughtResponse!
  createNewsPick(input: CreateNewsPickInput!): NewsPick!
  deleteNewsPick(input: DeleteNewsPickInput!): News!
  updateMe(input: UpdateMeInput!): Me!
  uploadImage(file: Upload!): SubImage!
  follow(followeeId: ID!): User!
  unfollow(followeeId: ID!): User!
  block(blockTo: ID!): User!
  unblock(blockedUserId: ID!): User!
  joinThoughtTalk(input: JoinTalkInput!): ThoughtTalkRoom!
  createThoughtTalkRoomMessage(
    input: CreateThoughtTalkRoomMessageInput!
  ): ThoughtTalkRoomMessage
  createUserThoughtTalkRoomMessageSeen(
    input: CreateUserThoughtTalkRoomMessageSeenInput!
  ): ThoughtTalkRoom!
  getOutThoughtTalkRoom(input: GetOutThoughtTalkRoomInput!): Boolean
  deleteThoughtTalkRoomMember(
    input: DeleteThoughtTalkRoomMemberInput!
  ): ThoughtTalkRoom!
  deleteThoughtTalkRoom(input: DeleteThoughtTalkRoomInput!): Boolean
  joinNewsTalkRoom(input: JoinNewsTalkRoomInput!): NewsTalkRoom!
  createNewsTalkRoomMessage(
    input: CreateNewsTalkRoomMessageInput!
  ): NewsTalkRoomMessage!
  createUserNewsTalkRoomMessageSeen(
    input: CreateUserNewsTalkRoomMessageSeenInput!
  ): NewsTalkRoom!
  getOutNewsTalkRoom(input: GetOutNewsTalkRoomInput!): Boolean
  requestNewsTalkRoomMemberDeletion(
    input: RequestNewsTalkRoomMemberDeletionInput!
  ): Boolean
  createOneOnOneTalkRoom(input: CreateOneOnOneTalkRoomInput!): OneOnOneTalkRoom!
  createOneOnOneTalkRoomMessage(
    input: CreateOneOnOneTalkRoomMessageInput!
  ): OneOnOneTalkRoomMessage!
  seenOneOnOneTalkRoomMessage(
    input: SeenOneOnOneTalkRoomMessageInput!
  ): OneOnOneTalkRoom!
  deleteOneOnOneTalkRoom(input: DeleteOneOnOneTalkRoonInput!): Boolean
  addDeviceToken(input: AddDeviceTokenInput!): Boolean
  likeThought(input: LikeThoughtInput!): Thought
  unlikeThought(input: UnLikeThoughtInput!): Thought
  deleteAccount: Boolean
  seeNotification(id: Int!): Notification!
  verifyIapReceipt(input: VerifyIapReceiptInput!): Me!
  updateEmail(input: UpdateEmailInput!): Boolean
  createEmailAuthCode(input: CreateEmailAuthCodeInput!): Int!
  verifyEmailAuthCode(input: VerifyEmailAuthCodeInput!, id: Int!): Boolean
}
