scalar Void
scalar Upload

enum Genre {
  BUSINESS
  ECONOMY
  POLITICS
  SOCIETY
}

enum NewsGenre {
  BUSINESS
  ECONOMY
  POLITICS
  TECHNOLOGY
}

enum CustomErrorResponseCode {
  ALREADY_USER_EXISTING
  INVALID_REQUEST
  ALREADY_UN_BLOKING
  NOT_FOUND
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface TalkRoom {
  id: Int!
  createdAt: String
  updatedAt: String
  allMessageSeen: Boolean
}

interface TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
}

interface TalkRoomMember {
  id: Int!
  createdAt: String
  user: User!
  talkRoom: TalkRoom
}

type Image {
  id: ID!
  url: String!
  width: Int
  height: Int
}

type ThuoghtImage {
  id: ID!
  url: String!
  width: Int
  height: Int
}

type User {
  id: ID!
  name: String!
  bio: String
  imageUrl: String
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
  follow: Boolean
  blocking: Boolean
}

type Me {
  id: ID!
  name: String!
  bio: String
  imageUrl: String
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
}

type Pick {
  id: ID!
  thoughtId: ID!
}

type NewsPick {
  id: Int!
  newsId: Int!
}

type Thought {
  id: ID!
  title: String
  text: String!
  createdAt: String
  contributor: User
  picked: Boolean
  images: [ThuoghtImage]!
}

type News {
  id: Int!
  title: String!
  link: String!
  image: String
  articleCreatedAt: String
  genre: NewsGenre!
  provider: String
  picked: Boolean!
}

type Follow {
  id: ID!
  followerId: ID!
  followeeId: ID!
}

type ThoughtEdge {
  node: Thought!
  cursor: String!
}

type ThoughtsConnection {
  edges: [ThoughtEdge!]!
  pageInfo: PageInfo!
}

type InitialResponse {
  me: User!
}

type NewsEdge {
  node: News!
  cursor: String!
}

type NewsConnection {
  edges: [NewsEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type ThoughtTalkRoom implements TalkRoom {
  id: Int!
  thought: Thought
  createdAt: String
  updatedAt: String
  members(first: Int, after: String): ThoughtTalkRoomMemberConnection
  messages(first: Int!, after: String): ThoughtTalkRoomMessageConnection
  allMessageSeen: Boolean
}

type ThoughtTalkRoomMessage implements TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
  talkRoom: ThoughtTalkRoom
  replyMessage: ThoughtTalkRoomMessage
}

type ThoughtTalkRoomMessageEdge {
  node: ThoughtTalkRoomMessage!
  cursor: String!
}

type ThoughtTalkRoomMessageConnection {
  edges: [ThoughtTalkRoomMessageEdge!]!
  pageInfo: PageInfo!
}

type ThoughtTalkRoomMember implements TalkRoomMember {
  id: Int!
  createdAt: String
  talkRoom: ThoughtTalkRoom
  user: User!
}

type ThoughtTalkRoomMemberEdge {
  node: ThoughtTalkRoomMember!
  cursor: String!
}

type ThoughtTalkRoomMemberConnection {
  edges: [ThoughtTalkRoomMemberEdge!]!
  pageInfo: PageInfo!
}

type NewsTalkRoom implements TalkRoom {
  id: Int!
  news: News
  createdAt: String
  updatedAt: String
  allMessageSeen: Boolean
  members(first: Int, after: String): NewsTalkRoomMemberConnection
  messages(first: Int, after: String): NewsTalkRoomMessageConnection
}

type NewsTalkRoomMessage implements TalkRoomMessage {
  id: Int!
  text: String!
  createdAt: String!
  sender: User
  roomId: Int
  talkRoom: NewsTalkRoom
  replyMessage: NewsTalkRoomMessage
}

type NewsTalkRoomMessageEdge {
  node: NewsTalkRoomMessage!
  cursor: String!
}

type NewsTalkRoomMessageConnection {
  edges: [NewsTalkRoomMessageEdge!]!
  pageInfo: PageInfo!
}

type NewsTalkRoomMember implements TalkRoomMember {
  id: Int!
  createdAt: String
  user: User!
  talkRoom: NewsTalkRoom
}

type NewsTalkRoomMemberEdge {
  node: NewsTalkRoomMember!
  cursor: String!
}

type NewsTalkRoomMemberConnection {
  edges: [NewsTalkRoomMemberEdge!]!
  pageInfo: PageInfo!
}

type Query {
  thoughts(
    genre: Genre
    first: Int
    after: String
    follow: Boolean
  ): ThoughtsConnection!
  initialData: InitialResponse!
  news(genre: NewsGenre!, first: Int, after: String): NewsConnection
  me: Me!
  user(id: ID!): User!
  pickedThoughts(first: Int!, after: String): ThoughtsConnection!
  pickedNews(first: Int!, after: String): NewsConnection!
  userThoughts(userId: ID!, first: Int!, after: String): ThoughtsConnection!
  follows(first: Int!, after: String, q: String): UserConnection!
  blockingUsers: [User]!
  thoughtTalkRooms: [ThoughtTalkRoom]!
  thoughtTalkRoom(id: Int!): ThoughtTalkRoom!
  newsTalkRooms: [NewsTalkRoom!]!
  newsTalkRoom(id: Int!): NewsTalkRoom!
  oneNews(id: Int!): News!
  thought(id: ID!): Thought!
}

input CreateUserInput {
  name: String!
  email: String!
  idToken: String!
}

input CreatePickInput {
  thoughtId: String!
}

type SignOutResponse {
  id: ID!
}

# Imageはidなしの型を使いたい時があるのでidなしImageを定義
type SubImage {
  url: String!
  width: Int
  height: Int
}

input ImageInput {
  url: String!
  width: Int
  height: Int
}

type UploadThoughtImagesResponse {
  images: [SubImage!]!
}

input CreateThoughtInput {
  title: String
  text: String!
  images: [ImageInput!]
  genre: Genre!
}

type CreateThoughtResponse {
  id: ID!
}

input DeleteThoughtInput {
  id: String!
}

type DeleteThoughtResponse {
  id: ID!
}

input CreateNewsPickInput {
  newsId: Int!
}

type CreateNewsPickResponse {
  id: Int!
}

input DeleteNewsPickInput {
  newsId: Int!
}

input UpdateMeInput {
  name: String!
  bio: String
  imageUrl: String
  facebook: String
  twitter: String
  linkedin: String
  instagram: String
}

input JoinTalkInput {
  thoughtId: String!
  contributorId: String!
}

input CreateThoughtTalkRoomMessageInput {
  text: String!
  roomId: Int!
  replyTo: Int
}

input CreateUserThoughtTalkRoomMessageSeenInput {
  messageId: Int!
  roomId: Int!
}

input GetOutThoughtTalkRoomInput {
  roomId: Int!
}

input DeleteThoughtTalkRoomMemberInput {
  roomId: Int!
  userId: ID!
}

input DeleteThoughtTalkRoomInput {
  talkRoomId: Int!
}

input JoinNewsTalkRoomInput {
  newsId: Int!
}

input CreateNewsTalkRoomMessageInput {
  text: String!
  talkRoomId: Int!
  replyTo: Int
}

input CreateUserNewsTalkRoomMessageSeenInput {
  messageId: Int!
  talkRoomId: Int!
}

input GetOutNewsTalkRoomInput {
  talkRoomId: Int!
}

input RequestNewsTalkRoomMemberDeletionInput {
  memberId: Int! # UserのIDではなくNewsTalkRoomMemberのID
  talkRoomId: Int!
}

type Mutation {
  createUser(input: CreateUserInput!): Me!
  createPick(input: CreatePickInput!): Pick!
  deletePick(thoughtId: ID!): Pick!
  signOut: SignOutResponse!
  uploadThoughtImages(files: [Upload!]!): UploadThoughtImagesResponse!
  createThought(input: CreateThoughtInput!): CreateThoughtResponse!
  deleteThought(input: DeleteThoughtInput!): DeleteThoughtResponse!
  createNewsPick(input: CreateNewsPickInput!): NewsPick!
  deleteNewsPick(input: DeleteNewsPickInput!): NewsPick!
  updateMe(input: UpdateMeInput!): Me!
  uploadImage(file: Upload!): SubImage!
  follow(followeeId: ID!): User!
  unfollow(followeeId: ID!): User!
  block(blockTo: ID!): User!
  unblock(blockedUserId: ID!): User!
  joinThoughtTalk(input: JoinTalkInput!): ThoughtTalkRoom!
  createThoughtTalkRoomMessage(
    input: CreateThoughtTalkRoomMessageInput!
  ): ThoughtTalkRoomMessage
  createUserThoughtTalkRoomMessageSeen(
    input: CreateUserThoughtTalkRoomMessageSeenInput!
  ): ThoughtTalkRoom!
  getOutThoughtTalkRoom(input: GetOutThoughtTalkRoomInput!): Boolean
  deleteThoughtTalkRoomMember(
    input: DeleteThoughtTalkRoomMemberInput!
  ): ThoughtTalkRoom!
  deleteThoughtTalkRoom(input: DeleteThoughtTalkRoomInput!): Boolean
  joinNewsTalkRoom(input: JoinNewsTalkRoomInput!): NewsTalkRoom!
  createNewsTalkRoomMessage(
    input: CreateNewsTalkRoomMessageInput!
  ): NewsTalkRoomMessage!
  createUserNewsTalkRoomMessageSeen(
    input: CreateUserNewsTalkRoomMessageSeenInput!
  ): NewsTalkRoom!
  getOutNewsTalkRoom(input: GetOutNewsTalkRoomInput!): Boolean
  requestNewsTalkRoomMemberDeletion(
    input: RequestNewsTalkRoomMemberDeletionInput!
  ): Boolean
}

type Subscription {
  thoughtTalkRoomMessageCreated(
    roomIds: [Int]!
    userId: ID!
  ): ThoughtTalkRoomMessage
  newsTalkRoomMessageCreated(roomIds: [Int]!, userId: ID!): NewsTalkRoomMessage!
}
