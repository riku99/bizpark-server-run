// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  uid String @unique
  name String
  email String @unique
  bio String?
  imageUrl String?
  createdAt DateTime @default(now())
  loggedIn Boolean @default(false)
  facebook String?
  twitter String?
  linkedin String?
  instagram String? 
  plan Plan @default(Normal)

  thoughts Thought[]
  thoughtTalkRoomMessages ThoughtTalkRoomMessage[]
  thoughtTalkRooms ThoughtTalkRoomMember[]
  seenThoughtTalkRoomMessages UserThoughtTalkRoomMessageSeen[]

  senderOneOnOneTalkRoom OneOnOneTalkRoom[] @relation("sender")
  recipirntOneOnOneTalkRoom OneOnOneTalkRoom[] @relation("recipient")
  OneOnOneTalkRoomMessages OneOnOneTalkRoomMessage[]

  blocks Block[] @relation("blocks")
  blocked Block[] @relation("blocked")

  picks Pick[]
  newsPicks NewsPick[]

  follow Follow[] @relation("follow")
  follower Follow[] @relation("follower")
  
  newsTalkRoomMessages NewsTalkRoomMessage[]
  seenNewsTalkRoomMessages UserNewsTalkRoomMessageSeen[]
  newsTalkRooms NewsTalkRoomMember[]

  deleteRequestingNewsTalkRooms NewsTalkRoomMemberDeleteRequest[]

  deletedNewsTalkRoom DeletedUserFromNewsTalkRoom[]

  deviceTokens DeviceToken[]

  thoughtLikes ThoughtLike[]

  notifications Notification[] @relation("user")
  performNotifications Notification[] @relation("performer")
}

model Thought {
  id String @id @default(uuid())
  title String? @db.VarChar(30)
  text String   @db.VarChar(500)
  contributorId String
  createdAt DateTime @default(now())
  cursor Int @default(autoincrement()) @unique 
  genre Genre

  contributor User @relation(fields: [contributorId], references: [id], onDelete: Cascade)

  images ThoughtImage[]
  talkRooms ThoughtTalkRoom[]
  likes ThoughtLike[]
  picked Pick[]
  notifications Notification[]

  @@index([genre, cursor])
  @@index([contributorId, cursor])
}

model ThoughtLike {
  id Int @id @default(autoincrement())
  userId String
  thoughtId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  thought Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, thoughtId])
}

model ThoughtImage {
  id String @id @default(uuid())
  url String
  width Int?
  height Int?
  thoughtId String

  parent Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@index([thoughtId])
}

model News {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  title String
  link String @unique
  image String?
  articleCreatedAt DateTime?
  genre NewsGenre
  provider String?
  apiSource String? // どのAPIから取得したデータか

  talkRooms NewsTalkRoom[]

  picked NewsPick[]

  @@index([genre])
}

model ThoughtTalkRoom {
  id Int @id @default(autoincrement())
  thoughtId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thought Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)
  messages ThoughtTalkRoomMessage[]
  members ThoughtTalkRoomMember[]

  @@index([thoughtId])
  @@index([updatedAt])
}

model ThoughtTalkRoomMessage {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  senderId String? // ユーザーが削除された場合空になるのでオプショナル
  roomId Int
  replyTo Int?

  sender User? @relation(fields: [senderId], references: [id]) // ユーザーが削除された場合を考えて外部キー制約外す
  talkRoom ThoughtTalkRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  replyMessage ThoughtTalkRoomMessage? @relation("Reply", fields: [replyTo], references: [id])
  replyBy ThoughtTalkRoomMessage[] @relation("Reply")

  seen UserThoughtTalkRoomMessageSeen[]

  @@index([roomId, createdAt])
}

model UserThoughtTalkRoomMessageSeen {
  id String @id @default(uuid())
  userId String
  messageId Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  message ThoughtTalkRoomMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@index([userId, messageId])
}

model ThoughtTalkRoomMember {
  id Int @id @default(autoincrement())
  talkRoomId Int
  userId String
  createdAt DateTime @default(now())

  talkRoom ThoughtTalkRoom @relation(fields: [talkRoomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([talkRoomId])
  @@index([userId])
  @@unique([talkRoomId, userId])
}

model NewsTalkRoom {
  id Int @id @default(autoincrement())
  newsId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  messages NewsTalkRoomMessage[]
  members NewsTalkRoomMember[]

  deleteRequestedRooms NewsTalkRoomMemberDeleteRequest[]
  deletedUser DeletedUserFromNewsTalkRoom[]

  @@index([newsId])
  @@index([updatedAt])
}

model NewsTalkRoomMessage {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  senderId String?
  roomId Int
  replyTo Int?

  sender User? @relation(fields: [senderId], references: [id])
  talkRoom NewsTalkRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  replyMessage NewsTalkRoomMessage? @relation("ReplyMessage", fields: [replyTo], references: [id])
  replyBy NewsTalkRoomMessage[] @relation("ReplyMessage")

  seen UserNewsTalkRoomMessageSeen[]

  @@index([roomId])
}

model UserNewsTalkRoomMessageSeen {
  id Int @id @default(autoincrement()) 
  userId String
  messageId Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  message NewsTalkRoomMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([userId, messageId])
}

model NewsTalkRoomMember {
  id Int @id @default(autoincrement())
  talkRoomId Int
  userId String
  createdAt DateTime @default(now())

  talkRoom NewsTalkRoom @relation(fields: [talkRoomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  deleteRequestedMembers NewsTalkRoomMemberDeleteRequest[]

  @@index([talkRoomId])
  @@index([userId])
  @@unique([talkRoomId, userId])
}

model NewsTalkRoomMemberDeleteRequest {
  id Int @id @default(autoincrement())
  talkRoomId Int
  memberId Int
  requestUserId String

  member NewsTalkRoomMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  talkRoom NewsTalkRoom @relation(fields: [talkRoomId], references: [id], onDelete: Cascade)
  requestUser User @relation(fields: [requestUserId], references: [id], onDelete: Cascade)

  @@unique([memberId, requestUserId])
}

model DeletedUserFromNewsTalkRoom {
  id Int @id @default(autoincrement())
  talkRoomId Int
  userId String

  talkRoom NewsTalkRoom @relation(fields: [talkRoomId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([talkRoomId, userId])
}

model OneOnOneTalkRoom {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId String
  recipientId String

  sender User @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  messages OneOnOneTalkRoomMessage[]

  @@index([senderId])
  @@index([recipientId])
}

model OneOnOneTalkRoomMessage {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  senderId String
  roomId Int
  seen Boolean?
  replyTo Int?

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  room OneOnOneTalkRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  replyMessage OneOnOneTalkRoomMessage? @relation("ReplyOneOnOneTalkRoomMessage", fields: [replyTo], references: [id])
  replyBy OneOnOneTalkRoomMessage[] @relation("ReplyOneOnOneTalkRoomMessage")

  @@index([roomId])
}

model Block {
  id String @id @default(uuid())
  blockBy String
  blockTo String

  blocker User @relation("blocks", fields: [blockBy], references: [id], onDelete: Cascade)
  blocked User @relation("blocked", fields: [blockTo], references: [id], onDelete: Cascade)

  @@unique([blockBy, blockTo])
  @@index([blockBy, blockTo])
}

model Pick {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  pickerId String
  thoughtId String

  picker User @relation(fields: [pickerId], references: [id], onDelete: Cascade)
  thought Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@index([pickerId])
  @@index([thoughtId])
  @@unique(fields: [pickerId, thoughtId], name: "userPickedId")
}

model NewsPick {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  pickerId String
  newsId Int

  picker User @relation(fields: [pickerId], references: [id], onDelete: Cascade)
  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
}

model Image {
  id String @id @default(uuid())
  url String
  width Int?
  height Int?
  createdAt DateTime @default(now())
}

model Follow {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  followerId String
  followeeId String
  cursor Int @default(autoincrement()) @unique 

  follower User @relation("follow", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("follower", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([cursor])
}

model DeviceToken {
  id Int @id @default(autoincrement())
  token String @unique()
  userId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId String
  performerId String
  type NotificationType
  talkRoomType TalkRoomType?
  talkRoomId Int?
  thoughtId String?
  seen Boolean?

  user User @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  performer User @relation("performer", fields: [performerId], references: [id], onDelete: Cascade)
  thought Thought? @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Genre {
  BUSINESS
  ECONOMY
  POLITICS
  SOCIETY
}

enum NewsGenre {
  BUSINESS
  ECONOMY
  POLITICS
  TECHNOLOGY
}

enum NotificationType {
  REPLY
  LIKE
  FOLLOW
}

enum TalkRoomType {
  THOUGHT
  NEWS
  ONEONONE
}

enum Plan {
  Normal
  Plus
}