// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  uid String @unique
  name String
  email String @unique
  bio String?
  imageUrl String?
  createdAt DateTime @default(now())
  loggedIn Boolean @default(false)
  facebook String?
  twitter String?
  linkedin String?
  instagram String?

  thoughts Thought[]
  thoughtTalkRoomMessages ThoughtTalkRoomMessage[]
  thoughtTalkRooms ThoughtTalkRoomMember[]

  senderOneOnOneRoom OneOnOneRoom[] @relation("sender")
  recipirntOneOnOneRoom OneOnOneRoom[] @relation("recipient")
  oneOnOneMessages OneOnOneMessage[]

  blocks Block[] @relation("blocks")
  blocked Block[] @relation("blocked")

  picks Pick[]
  newsPicks NewsPick[]

  follow Follow[] @relation("follow")
  follower Follow[] @relation("follower")
}

model Thought {
  id String @id @default(uuid())
  title String? @db.VarChar(30)
  text String   @db.VarChar(500)
  contributorId String
  createdAt DateTime @default(now())
  cursor Int @default(autoincrement()) @unique 
  genre Genre

  contributor User @relation(fields: [contributorId], references: [id], onDelete: Cascade)

  images ThoughtImage[]
  talkRooms ThoughtTalkRoom[]
  picked Pick[]

  @@index([genre, cursor])
  @@index([contributorId, cursor])
}

model ThoughtImage {
  id String @id @default(uuid())
  url String
  width Int?
  height Int?
  thoughtId String

  parent Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@index([thoughtId])
}

model News {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  title String
  link String
  image String?
  articleCreatedAt DateTime?
  genre NewsGenre
  provider String?
  cursor Int @default(autoincrement()) @unique 
  isPicked Boolean @default(false) // ピックされてないものは削除するのでそのためのフラグ
  apiSource String? // どのAPIから取得したデータか

  picked NewsPick[]

  @@index([genre, cursor])
}

model ThoughtTalkRoom {
  id String @id @default(uuid())
  thoughtId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thought Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)
  messages ThoughtTalkRoomMessage[]
  members ThoughtTalkRoomMember[]

  @@index([thoughtId])
}

model ThoughtTalkRoomMessage {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  senderId String
  roomId String

  sender User @relation(fields: [senderId], references: [id])
  talkRoom ThoughtTalkRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model ThoughtTalkRoomMember {
  id String @id @default(uuid())
  talkRoomId String
  userId String
  createdAt DateTime @default(now())

  talkRoom ThoughtTalkRoom @relation(fields: [talkRoomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([talkRoomId])
  @@index([userId])
}

model OneOnOneRoom {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId String
  recipientId String

  sender User @relation("sender", fields: [senderId], references: [id])
  recipient User @relation("recipient", fields: [recipientId], references: [id])

  messages OneOnOneMessage[]

  @@index([senderId])
}

model OneOnOneMessage {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  senderId String
  roomId String

  sender User @relation(fields: [senderId], references: [id])
  room OneOnOneRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model Block {
  id String @id @default(uuid())
  blockBy String
  blockTo String

  blocker User @relation("blocks", fields: [blockBy], references: [id], onDelete: Cascade)
  blocked User @relation("blocked", fields: [blockTo], references: [id], onDelete: Cascade)

  @@unique([blockBy, blockTo])
  @@index([blockBy, blockTo])
}

model Pick {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  pickerId String
  thoughtId String

  picker User @relation(fields: [pickerId], references: [id], onDelete: Cascade)
  thought Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)

  @@index([pickerId])
  @@index([thoughtId])
  @@unique(fields: [pickerId, thoughtId], name: "userPickedId")
}

model NewsPick {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  pickerId String
  newsId String

  picker User @relation(fields: [pickerId], references: [id], onDelete: Cascade)
  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)
}

model Image {
  id String @id @default(uuid())
  url String
  width Int?
  height Int?
  createdAt DateTime @default(now())
}

model Follow {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  followerId String
  followeeId String
  cursor Int @default(autoincrement()) @unique 

  follower User @relation("follow", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("follower", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([cursor])
}

enum Genre {
  BUSINESS
  ECONOMY
  POLITICS
  SOCIETY
}

enum NewsGenre {
  BUSINESS
  ECONOMY
  POLITICS
  TECHNOLOGY
}